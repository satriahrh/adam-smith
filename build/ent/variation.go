// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/satriahrh/adam-smith/build/ent/product"
	"github.com/satriahrh/adam-smith/build/ent/variation"
)

// Variation is the model entity for the Variation schema.
type Variation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Images holds the value of the "images" field.
	Images []string `json:"images,omitempty"`
	// Stock holds the value of the "stock" field.
	Stock uint8 `json:"stock,omitempty"`
	// Price holds the value of the "price" field.
	Price uint `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VariationQuery when eager-loading is set.
	Edges              VariationEdges `json:"edges"`
	product_variations *int
	variation_children *int
}

// VariationEdges holds the relations/edges for other nodes in the graph.
type VariationEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Variation
	// Children holds the value of the children edge.
	Children []*Variation
	// Product holds the value of the product edge.
	Product *Product
	// Variant holds the value of the variant edge.
	Variant []*Variant
	// OutboundDeals holds the value of the outbound_deals edge.
	OutboundDeals []*OutboundDeal
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VariationEdges) ParentOrErr() (*Variation, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: variation.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e VariationEdges) ChildrenOrErr() ([]*Variation, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VariationEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[2] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// VariantOrErr returns the Variant value or an error if the edge
// was not loaded in eager-loading.
func (e VariationEdges) VariantOrErr() ([]*Variant, error) {
	if e.loadedTypes[3] {
		return e.Variant, nil
	}
	return nil, &NotLoadedError{edge: "variant"}
}

// OutboundDealsOrErr returns the OutboundDeals value or an error if the edge
// was not loaded in eager-loading.
func (e VariationEdges) OutboundDealsOrErr() ([]*OutboundDeal, error) {
	if e.loadedTypes[4] {
		return e.OutboundDeals, nil
	}
	return nil, &NotLoadedError{edge: "outbound_deals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Variation) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&[]byte{},        // images
		&sql.NullInt64{}, // stock
		&sql.NullInt64{}, // price
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Variation) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // product_variations
		&sql.NullInt64{}, // variation_children
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Variation fields.
func (v *Variation) assignValues(values ...interface{}) error {
	if m, n := len(values), len(variation.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	v.ID = int(value.Int64)
	values = values[1:]

	if value, ok := values[0].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field images", values[0])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &v.Images); err != nil {
			return fmt.Errorf("unmarshal field images: %v", err)
		}
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field stock", values[1])
	} else if value.Valid {
		v.Stock = uint8(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field price", values[2])
	} else if value.Valid {
		v.Price = uint(value.Int64)
	}
	values = values[3:]
	if len(values) == len(variation.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field product_variations", value)
		} else if value.Valid {
			v.product_variations = new(int)
			*v.product_variations = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field variation_children", value)
		} else if value.Valid {
			v.variation_children = new(int)
			*v.variation_children = int(value.Int64)
		}
	}
	return nil
}

// QueryParent queries the parent edge of the Variation.
func (v *Variation) QueryParent() *VariationQuery {
	return (&VariationClient{config: v.config}).QueryParent(v)
}

// QueryChildren queries the children edge of the Variation.
func (v *Variation) QueryChildren() *VariationQuery {
	return (&VariationClient{config: v.config}).QueryChildren(v)
}

// QueryProduct queries the product edge of the Variation.
func (v *Variation) QueryProduct() *ProductQuery {
	return (&VariationClient{config: v.config}).QueryProduct(v)
}

// QueryVariant queries the variant edge of the Variation.
func (v *Variation) QueryVariant() *VariantQuery {
	return (&VariationClient{config: v.config}).QueryVariant(v)
}

// QueryOutboundDeals queries the outbound_deals edge of the Variation.
func (v *Variation) QueryOutboundDeals() *OutboundDealQuery {
	return (&VariationClient{config: v.config}).QueryOutboundDeals(v)
}

// Update returns a builder for updating this Variation.
// Note that, you need to call Variation.Unwrap() before calling this method, if this Variation
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Variation) Update() *VariationUpdateOne {
	return (&VariationClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (v *Variation) Unwrap() *Variation {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Variation is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Variation) String() string {
	var builder strings.Builder
	builder.WriteString("Variation(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", images=")
	builder.WriteString(fmt.Sprintf("%v", v.Images))
	builder.WriteString(", stock=")
	builder.WriteString(fmt.Sprintf("%v", v.Stock))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", v.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Variations is a parsable slice of Variation.
type Variations []*Variation

func (v Variations) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
