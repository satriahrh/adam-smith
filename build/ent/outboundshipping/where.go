// Code generated by entc, DO NOT EDIT.

package outboundshipping

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/satriahrh/adam-smith/build/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CourierTrackingCode applies equality check predicate on the "courier_tracking_code" field. It's identical to CourierTrackingCodeEQ.
func CourierTrackingCode(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierTrackingCode), v))
	})
}

// Consignee applies equality check predicate on the "consignee" field. It's identical to ConsigneeEQ.
func Consignee(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConsignee), v))
	})
}

// ConsigneePhone applies equality check predicate on the "consignee_phone" field. It's identical to ConsigneePhoneEQ.
func ConsigneePhone(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConsigneePhone), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// CourierEQ applies the EQ predicate on the "courier" field.
func CourierEQ(v Courier) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourier), v))
	})
}

// CourierNEQ applies the NEQ predicate on the "courier" field.
func CourierNEQ(v Courier) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourier), v))
	})
}

// CourierIn applies the In predicate on the "courier" field.
func CourierIn(vs ...Courier) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourier), v...))
	})
}

// CourierNotIn applies the NotIn predicate on the "courier" field.
func CourierNotIn(vs ...Courier) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourier), v...))
	})
}

// CourierTrackingCodeEQ applies the EQ predicate on the "courier_tracking_code" field.
func CourierTrackingCodeEQ(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeNEQ applies the NEQ predicate on the "courier_tracking_code" field.
func CourierTrackingCodeNEQ(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeIn applies the In predicate on the "courier_tracking_code" field.
func CourierTrackingCodeIn(vs ...string) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourierTrackingCode), v...))
	})
}

// CourierTrackingCodeNotIn applies the NotIn predicate on the "courier_tracking_code" field.
func CourierTrackingCodeNotIn(vs ...string) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourierTrackingCode), v...))
	})
}

// CourierTrackingCodeGT applies the GT predicate on the "courier_tracking_code" field.
func CourierTrackingCodeGT(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeGTE applies the GTE predicate on the "courier_tracking_code" field.
func CourierTrackingCodeGTE(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeLT applies the LT predicate on the "courier_tracking_code" field.
func CourierTrackingCodeLT(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeLTE applies the LTE predicate on the "courier_tracking_code" field.
func CourierTrackingCodeLTE(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeContains applies the Contains predicate on the "courier_tracking_code" field.
func CourierTrackingCodeContains(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeHasPrefix applies the HasPrefix predicate on the "courier_tracking_code" field.
func CourierTrackingCodeHasPrefix(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeHasSuffix applies the HasSuffix predicate on the "courier_tracking_code" field.
func CourierTrackingCodeHasSuffix(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeEqualFold applies the EqualFold predicate on the "courier_tracking_code" field.
func CourierTrackingCodeEqualFold(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourierTrackingCode), v))
	})
}

// CourierTrackingCodeContainsFold applies the ContainsFold predicate on the "courier_tracking_code" field.
func CourierTrackingCodeContainsFold(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourierTrackingCode), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// ConsigneeEQ applies the EQ predicate on the "consignee" field.
func ConsigneeEQ(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConsignee), v))
	})
}

// ConsigneeNEQ applies the NEQ predicate on the "consignee" field.
func ConsigneeNEQ(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConsignee), v))
	})
}

// ConsigneeIn applies the In predicate on the "consignee" field.
func ConsigneeIn(vs ...string) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConsignee), v...))
	})
}

// ConsigneeNotIn applies the NotIn predicate on the "consignee" field.
func ConsigneeNotIn(vs ...string) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConsignee), v...))
	})
}

// ConsigneeGT applies the GT predicate on the "consignee" field.
func ConsigneeGT(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConsignee), v))
	})
}

// ConsigneeGTE applies the GTE predicate on the "consignee" field.
func ConsigneeGTE(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConsignee), v))
	})
}

// ConsigneeLT applies the LT predicate on the "consignee" field.
func ConsigneeLT(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConsignee), v))
	})
}

// ConsigneeLTE applies the LTE predicate on the "consignee" field.
func ConsigneeLTE(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConsignee), v))
	})
}

// ConsigneeContains applies the Contains predicate on the "consignee" field.
func ConsigneeContains(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConsignee), v))
	})
}

// ConsigneeHasPrefix applies the HasPrefix predicate on the "consignee" field.
func ConsigneeHasPrefix(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConsignee), v))
	})
}

// ConsigneeHasSuffix applies the HasSuffix predicate on the "consignee" field.
func ConsigneeHasSuffix(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConsignee), v))
	})
}

// ConsigneeEqualFold applies the EqualFold predicate on the "consignee" field.
func ConsigneeEqualFold(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConsignee), v))
	})
}

// ConsigneeContainsFold applies the ContainsFold predicate on the "consignee" field.
func ConsigneeContainsFold(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConsignee), v))
	})
}

// ConsigneePhoneEQ applies the EQ predicate on the "consignee_phone" field.
func ConsigneePhoneEQ(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneNEQ applies the NEQ predicate on the "consignee_phone" field.
func ConsigneePhoneNEQ(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneIn applies the In predicate on the "consignee_phone" field.
func ConsigneePhoneIn(vs ...string) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConsigneePhone), v...))
	})
}

// ConsigneePhoneNotIn applies the NotIn predicate on the "consignee_phone" field.
func ConsigneePhoneNotIn(vs ...string) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConsigneePhone), v...))
	})
}

// ConsigneePhoneGT applies the GT predicate on the "consignee_phone" field.
func ConsigneePhoneGT(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneGTE applies the GTE predicate on the "consignee_phone" field.
func ConsigneePhoneGTE(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneLT applies the LT predicate on the "consignee_phone" field.
func ConsigneePhoneLT(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneLTE applies the LTE predicate on the "consignee_phone" field.
func ConsigneePhoneLTE(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneContains applies the Contains predicate on the "consignee_phone" field.
func ConsigneePhoneContains(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneHasPrefix applies the HasPrefix predicate on the "consignee_phone" field.
func ConsigneePhoneHasPrefix(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneHasSuffix applies the HasSuffix predicate on the "consignee_phone" field.
func ConsigneePhoneHasSuffix(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneEqualFold applies the EqualFold predicate on the "consignee_phone" field.
func ConsigneePhoneEqualFold(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConsigneePhone), v))
	})
}

// ConsigneePhoneContainsFold applies the ContainsFold predicate on the "consignee_phone" field.
func ConsigneePhoneContainsFold(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConsigneePhone), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...uint) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...uint) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostalCode), v))
	})
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCost), v))
	})
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...uint) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCost), v...))
	})
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...uint) predicate.OutboundShipping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OutboundShipping(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCost), v...))
	})
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCost), v))
	})
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCost), v))
	})
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCost), v))
	})
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v uint) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCost), v))
	})
}

// HasTransaction applies the HasEdge predicate on the "transaction" edge.
func HasTransaction() predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TransactionTable, TransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionWith applies the HasEdge predicate on the "transaction" edge with a given conditions (other predicates).
func HasTransactionWith(preds ...predicate.OutboundTransaction) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TransactionTable, TransactionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.OutboundShipping) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.OutboundShipping) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OutboundShipping) predicate.OutboundShipping {
	return predicate.OutboundShipping(func(s *sql.Selector) {
		p(s.Not())
	})
}
