// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/build/ent/outbounddeal"
	"github.com/satriahrh/adam-smith/build/ent/outboundshipping"
	"github.com/satriahrh/adam-smith/build/ent/outboundtransaction"
	"github.com/satriahrh/adam-smith/ent/schema"
)

// OutboundTransactionCreate is the builder for creating a OutboundTransaction entity.
type OutboundTransactionCreate struct {
	config
	mutation *OutboundTransactionMutation
	hooks    []Hook
}

// SetChannel sets the channel field.
func (otc *OutboundTransactionCreate) SetChannel(o outboundtransaction.Channel) *OutboundTransactionCreate {
	otc.mutation.SetChannel(o)
	return otc
}

// SetInvoice sets the invoice field.
func (otc *OutboundTransactionCreate) SetInvoice(sti schema.OutboundTransactionInvoice) *OutboundTransactionCreate {
	otc.mutation.SetInvoice(sti)
	return otc
}

// SetBenefit sets the benefit field.
func (otc *OutboundTransactionCreate) SetBenefit(stb schema.OutboundTransactionBenefit) *OutboundTransactionCreate {
	otc.mutation.SetBenefit(stb)
	return otc
}

// SetCost sets the cost field.
func (otc *OutboundTransactionCreate) SetCost(stc schema.OutboundTransactionCost) *OutboundTransactionCreate {
	otc.mutation.SetCost(stc)
	return otc
}

// SetAmount sets the amount field.
func (otc *OutboundTransactionCreate) SetAmount(u uint) *OutboundTransactionCreate {
	otc.mutation.SetAmount(u)
	return otc
}

// AddDealIDs adds the deals edge to OutboundDeal by ids.
func (otc *OutboundTransactionCreate) AddDealIDs(ids ...int) *OutboundTransactionCreate {
	otc.mutation.AddDealIDs(ids...)
	return otc
}

// AddDeals adds the deals edges to OutboundDeal.
func (otc *OutboundTransactionCreate) AddDeals(o ...*OutboundDeal) *OutboundTransactionCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otc.AddDealIDs(ids...)
}

// SetShippingID sets the shipping edge to OutboundShipping by id.
func (otc *OutboundTransactionCreate) SetShippingID(id int) *OutboundTransactionCreate {
	otc.mutation.SetShippingID(id)
	return otc
}

// SetNillableShippingID sets the shipping edge to OutboundShipping by id if the given value is not nil.
func (otc *OutboundTransactionCreate) SetNillableShippingID(id *int) *OutboundTransactionCreate {
	if id != nil {
		otc = otc.SetShippingID(*id)
	}
	return otc
}

// SetShipping sets the shipping edge to OutboundShipping.
func (otc *OutboundTransactionCreate) SetShipping(o *OutboundShipping) *OutboundTransactionCreate {
	return otc.SetShippingID(o.ID)
}

// Mutation returns the OutboundTransactionMutation object of the builder.
func (otc *OutboundTransactionCreate) Mutation() *OutboundTransactionMutation {
	return otc.mutation
}

// Save creates the OutboundTransaction in the database.
func (otc *OutboundTransactionCreate) Save(ctx context.Context) (*OutboundTransaction, error) {
	var (
		err  error
		node *OutboundTransaction
	)
	if len(otc.hooks) == 0 {
		if err = otc.check(); err != nil {
			return nil, err
		}
		node, err = otc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = otc.check(); err != nil {
				return nil, err
			}
			otc.mutation = mutation
			node, err = otc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(otc.hooks) - 1; i >= 0; i-- {
			mut = otc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, otc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (otc *OutboundTransactionCreate) SaveX(ctx context.Context) *OutboundTransaction {
	v, err := otc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (otc *OutboundTransactionCreate) check() error {
	if _, ok := otc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New("ent: missing required field \"channel\"")}
	}
	if v, ok := otc.mutation.Channel(); ok {
		if err := outboundtransaction.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf("ent: validator failed for field \"channel\": %w", err)}
		}
	}
	if _, ok := otc.mutation.Invoice(); !ok {
		return &ValidationError{Name: "invoice", err: errors.New("ent: missing required field \"invoice\"")}
	}
	if _, ok := otc.mutation.Benefit(); !ok {
		return &ValidationError{Name: "benefit", err: errors.New("ent: missing required field \"benefit\"")}
	}
	if _, ok := otc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New("ent: missing required field \"cost\"")}
	}
	if _, ok := otc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New("ent: missing required field \"amount\"")}
	}
	return nil
}

func (otc *OutboundTransactionCreate) sqlSave(ctx context.Context) (*OutboundTransaction, error) {
	_node, _spec := otc.createSpec()
	if err := sqlgraph.CreateNode(ctx, otc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (otc *OutboundTransactionCreate) createSpec() (*OutboundTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &OutboundTransaction{config: otc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: outboundtransaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outboundtransaction.FieldID,
			},
		}
	)
	if value, ok := otc.mutation.Channel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundtransaction.FieldChannel,
		})
		_node.Channel = value
	}
	if value, ok := otc.mutation.Invoice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldInvoice,
		})
		_node.Invoice = value
	}
	if value, ok := otc.mutation.Benefit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldBenefit,
		})
		_node.Benefit = value
	}
	if value, ok := otc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := otc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundtransaction.FieldAmount,
		})
		_node.Amount = value
	}
	if nodes := otc.mutation.DealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outboundtransaction.DealsTable,
			Columns: []string{outboundtransaction.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := otc.mutation.ShippingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   outboundtransaction.ShippingTable,
			Columns: []string{outboundtransaction.ShippingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundshipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OutboundTransactionCreateBulk is the builder for creating a bulk of OutboundTransaction entities.
type OutboundTransactionCreateBulk struct {
	config
	builders []*OutboundTransactionCreate
}

// Save creates the OutboundTransaction entities in the database.
func (otcb *OutboundTransactionCreateBulk) Save(ctx context.Context) ([]*OutboundTransaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(otcb.builders))
	nodes := make([]*OutboundTransaction, len(otcb.builders))
	mutators := make([]Mutator, len(otcb.builders))
	for i := range otcb.builders {
		func(i int, root context.Context) {
			builder := otcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutboundTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, otcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, otcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, otcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (otcb *OutboundTransactionCreateBulk) SaveX(ctx context.Context) []*OutboundTransaction {
	v, err := otcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
