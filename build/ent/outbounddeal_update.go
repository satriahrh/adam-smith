// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/build/ent/outbounddeal"
	"github.com/satriahrh/adam-smith/build/ent/outboundtransaction"
	"github.com/satriahrh/adam-smith/build/ent/predicate"
	"github.com/satriahrh/adam-smith/build/ent/variant"
)

// OutboundDealUpdate is the builder for updating OutboundDeal entities.
type OutboundDealUpdate struct {
	config
	hooks    []Hook
	mutation *OutboundDealMutation
}

// Where adds a new predicate for the builder.
func (odu *OutboundDealUpdate) Where(ps ...predicate.OutboundDeal) *OutboundDealUpdate {
	odu.mutation.predicates = append(odu.mutation.predicates, ps...)
	return odu
}

// SetQuantity sets the quantity field.
func (odu *OutboundDealUpdate) SetQuantity(u uint) *OutboundDealUpdate {
	odu.mutation.ResetQuantity()
	odu.mutation.SetQuantity(u)
	return odu
}

// AddQuantity adds u to quantity.
func (odu *OutboundDealUpdate) AddQuantity(u uint) *OutboundDealUpdate {
	odu.mutation.AddQuantity(u)
	return odu
}

// SetAmount sets the amount field.
func (odu *OutboundDealUpdate) SetAmount(u uint) *OutboundDealUpdate {
	odu.mutation.ResetAmount()
	odu.mutation.SetAmount(u)
	return odu
}

// AddAmount adds u to amount.
func (odu *OutboundDealUpdate) AddAmount(u uint) *OutboundDealUpdate {
	odu.mutation.AddAmount(u)
	return odu
}

// SetVariantID sets the variant edge to Variant by id.
func (odu *OutboundDealUpdate) SetVariantID(id uint64) *OutboundDealUpdate {
	odu.mutation.SetVariantID(id)
	return odu
}

// SetNillableVariantID sets the variant edge to Variant by id if the given value is not nil.
func (odu *OutboundDealUpdate) SetNillableVariantID(id *uint64) *OutboundDealUpdate {
	if id != nil {
		odu = odu.SetVariantID(*id)
	}
	return odu
}

// SetVariant sets the variant edge to Variant.
func (odu *OutboundDealUpdate) SetVariant(v *Variant) *OutboundDealUpdate {
	return odu.SetVariantID(v.ID)
}

// SetParentID sets the parent edge to OutboundDeal by id.
func (odu *OutboundDealUpdate) SetParentID(id uint64) *OutboundDealUpdate {
	odu.mutation.SetParentID(id)
	return odu
}

// SetNillableParentID sets the parent edge to OutboundDeal by id if the given value is not nil.
func (odu *OutboundDealUpdate) SetNillableParentID(id *uint64) *OutboundDealUpdate {
	if id != nil {
		odu = odu.SetParentID(*id)
	}
	return odu
}

// SetParent sets the parent edge to OutboundDeal.
func (odu *OutboundDealUpdate) SetParent(o *OutboundDeal) *OutboundDealUpdate {
	return odu.SetParentID(o.ID)
}

// AddChildIDs adds the children edge to OutboundDeal by ids.
func (odu *OutboundDealUpdate) AddChildIDs(ids ...uint64) *OutboundDealUpdate {
	odu.mutation.AddChildIDs(ids...)
	return odu
}

// AddChildren adds the children edges to OutboundDeal.
func (odu *OutboundDealUpdate) AddChildren(o ...*OutboundDeal) *OutboundDealUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return odu.AddChildIDs(ids...)
}

// SetTransactionID sets the transaction edge to OutboundTransaction by id.
func (odu *OutboundDealUpdate) SetTransactionID(id uint64) *OutboundDealUpdate {
	odu.mutation.SetTransactionID(id)
	return odu
}

// SetNillableTransactionID sets the transaction edge to OutboundTransaction by id if the given value is not nil.
func (odu *OutboundDealUpdate) SetNillableTransactionID(id *uint64) *OutboundDealUpdate {
	if id != nil {
		odu = odu.SetTransactionID(*id)
	}
	return odu
}

// SetTransaction sets the transaction edge to OutboundTransaction.
func (odu *OutboundDealUpdate) SetTransaction(o *OutboundTransaction) *OutboundDealUpdate {
	return odu.SetTransactionID(o.ID)
}

// Mutation returns the OutboundDealMutation object of the builder.
func (odu *OutboundDealUpdate) Mutation() *OutboundDealMutation {
	return odu.mutation
}

// ClearVariant clears the "variant" edge to type Variant.
func (odu *OutboundDealUpdate) ClearVariant() *OutboundDealUpdate {
	odu.mutation.ClearVariant()
	return odu
}

// ClearParent clears the "parent" edge to type OutboundDeal.
func (odu *OutboundDealUpdate) ClearParent() *OutboundDealUpdate {
	odu.mutation.ClearParent()
	return odu
}

// ClearChildren clears all "children" edges to type OutboundDeal.
func (odu *OutboundDealUpdate) ClearChildren() *OutboundDealUpdate {
	odu.mutation.ClearChildren()
	return odu
}

// RemoveChildIDs removes the children edge to OutboundDeal by ids.
func (odu *OutboundDealUpdate) RemoveChildIDs(ids ...uint64) *OutboundDealUpdate {
	odu.mutation.RemoveChildIDs(ids...)
	return odu
}

// RemoveChildren removes children edges to OutboundDeal.
func (odu *OutboundDealUpdate) RemoveChildren(o ...*OutboundDeal) *OutboundDealUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return odu.RemoveChildIDs(ids...)
}

// ClearTransaction clears the "transaction" edge to type OutboundTransaction.
func (odu *OutboundDealUpdate) ClearTransaction() *OutboundDealUpdate {
	odu.mutation.ClearTransaction()
	return odu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (odu *OutboundDealUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(odu.hooks) == 0 {
		affected, err = odu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundDealMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			odu.mutation = mutation
			affected, err = odu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(odu.hooks) - 1; i >= 0; i-- {
			mut = odu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, odu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (odu *OutboundDealUpdate) SaveX(ctx context.Context) int {
	affected, err := odu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (odu *OutboundDealUpdate) Exec(ctx context.Context) error {
	_, err := odu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odu *OutboundDealUpdate) ExecX(ctx context.Context) {
	if err := odu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (odu *OutboundDealUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outbounddeal.Table,
			Columns: outbounddeal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: outbounddeal.FieldID,
			},
		},
	}
	if ps := odu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := odu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldQuantity,
		})
	}
	if value, ok := odu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldQuantity,
		})
	}
	if value, ok := odu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldAmount,
		})
	}
	if value, ok := odu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldAmount,
		})
	}
	if odu.mutation.VariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   outbounddeal.VariantTable,
			Columns: []string{outbounddeal.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := odu.mutation.VariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   outbounddeal.VariantTable,
			Columns: []string{outbounddeal.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if odu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outbounddeal.ParentTable,
			Columns: []string{outbounddeal.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := odu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outbounddeal.ParentTable,
			Columns: []string{outbounddeal.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if odu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outbounddeal.ChildrenTable,
			Columns: []string{outbounddeal.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := odu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !odu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outbounddeal.ChildrenTable,
			Columns: []string{outbounddeal.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := odu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outbounddeal.ChildrenTable,
			Columns: []string{outbounddeal.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if odu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outbounddeal.TransactionTable,
			Columns: []string{outbounddeal.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := odu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outbounddeal.TransactionTable,
			Columns: []string{outbounddeal.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, odu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outbounddeal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OutboundDealUpdateOne is the builder for updating a single OutboundDeal entity.
type OutboundDealUpdateOne struct {
	config
	hooks    []Hook
	mutation *OutboundDealMutation
}

// SetQuantity sets the quantity field.
func (oduo *OutboundDealUpdateOne) SetQuantity(u uint) *OutboundDealUpdateOne {
	oduo.mutation.ResetQuantity()
	oduo.mutation.SetQuantity(u)
	return oduo
}

// AddQuantity adds u to quantity.
func (oduo *OutboundDealUpdateOne) AddQuantity(u uint) *OutboundDealUpdateOne {
	oduo.mutation.AddQuantity(u)
	return oduo
}

// SetAmount sets the amount field.
func (oduo *OutboundDealUpdateOne) SetAmount(u uint) *OutboundDealUpdateOne {
	oduo.mutation.ResetAmount()
	oduo.mutation.SetAmount(u)
	return oduo
}

// AddAmount adds u to amount.
func (oduo *OutboundDealUpdateOne) AddAmount(u uint) *OutboundDealUpdateOne {
	oduo.mutation.AddAmount(u)
	return oduo
}

// SetVariantID sets the variant edge to Variant by id.
func (oduo *OutboundDealUpdateOne) SetVariantID(id uint64) *OutboundDealUpdateOne {
	oduo.mutation.SetVariantID(id)
	return oduo
}

// SetNillableVariantID sets the variant edge to Variant by id if the given value is not nil.
func (oduo *OutboundDealUpdateOne) SetNillableVariantID(id *uint64) *OutboundDealUpdateOne {
	if id != nil {
		oduo = oduo.SetVariantID(*id)
	}
	return oduo
}

// SetVariant sets the variant edge to Variant.
func (oduo *OutboundDealUpdateOne) SetVariant(v *Variant) *OutboundDealUpdateOne {
	return oduo.SetVariantID(v.ID)
}

// SetParentID sets the parent edge to OutboundDeal by id.
func (oduo *OutboundDealUpdateOne) SetParentID(id uint64) *OutboundDealUpdateOne {
	oduo.mutation.SetParentID(id)
	return oduo
}

// SetNillableParentID sets the parent edge to OutboundDeal by id if the given value is not nil.
func (oduo *OutboundDealUpdateOne) SetNillableParentID(id *uint64) *OutboundDealUpdateOne {
	if id != nil {
		oduo = oduo.SetParentID(*id)
	}
	return oduo
}

// SetParent sets the parent edge to OutboundDeal.
func (oduo *OutboundDealUpdateOne) SetParent(o *OutboundDeal) *OutboundDealUpdateOne {
	return oduo.SetParentID(o.ID)
}

// AddChildIDs adds the children edge to OutboundDeal by ids.
func (oduo *OutboundDealUpdateOne) AddChildIDs(ids ...uint64) *OutboundDealUpdateOne {
	oduo.mutation.AddChildIDs(ids...)
	return oduo
}

// AddChildren adds the children edges to OutboundDeal.
func (oduo *OutboundDealUpdateOne) AddChildren(o ...*OutboundDeal) *OutboundDealUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oduo.AddChildIDs(ids...)
}

// SetTransactionID sets the transaction edge to OutboundTransaction by id.
func (oduo *OutboundDealUpdateOne) SetTransactionID(id uint64) *OutboundDealUpdateOne {
	oduo.mutation.SetTransactionID(id)
	return oduo
}

// SetNillableTransactionID sets the transaction edge to OutboundTransaction by id if the given value is not nil.
func (oduo *OutboundDealUpdateOne) SetNillableTransactionID(id *uint64) *OutboundDealUpdateOne {
	if id != nil {
		oduo = oduo.SetTransactionID(*id)
	}
	return oduo
}

// SetTransaction sets the transaction edge to OutboundTransaction.
func (oduo *OutboundDealUpdateOne) SetTransaction(o *OutboundTransaction) *OutboundDealUpdateOne {
	return oduo.SetTransactionID(o.ID)
}

// Mutation returns the OutboundDealMutation object of the builder.
func (oduo *OutboundDealUpdateOne) Mutation() *OutboundDealMutation {
	return oduo.mutation
}

// ClearVariant clears the "variant" edge to type Variant.
func (oduo *OutboundDealUpdateOne) ClearVariant() *OutboundDealUpdateOne {
	oduo.mutation.ClearVariant()
	return oduo
}

// ClearParent clears the "parent" edge to type OutboundDeal.
func (oduo *OutboundDealUpdateOne) ClearParent() *OutboundDealUpdateOne {
	oduo.mutation.ClearParent()
	return oduo
}

// ClearChildren clears all "children" edges to type OutboundDeal.
func (oduo *OutboundDealUpdateOne) ClearChildren() *OutboundDealUpdateOne {
	oduo.mutation.ClearChildren()
	return oduo
}

// RemoveChildIDs removes the children edge to OutboundDeal by ids.
func (oduo *OutboundDealUpdateOne) RemoveChildIDs(ids ...uint64) *OutboundDealUpdateOne {
	oduo.mutation.RemoveChildIDs(ids...)
	return oduo
}

// RemoveChildren removes children edges to OutboundDeal.
func (oduo *OutboundDealUpdateOne) RemoveChildren(o ...*OutboundDeal) *OutboundDealUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oduo.RemoveChildIDs(ids...)
}

// ClearTransaction clears the "transaction" edge to type OutboundTransaction.
func (oduo *OutboundDealUpdateOne) ClearTransaction() *OutboundDealUpdateOne {
	oduo.mutation.ClearTransaction()
	return oduo
}

// Save executes the query and returns the updated entity.
func (oduo *OutboundDealUpdateOne) Save(ctx context.Context) (*OutboundDeal, error) {
	var (
		err  error
		node *OutboundDeal
	)
	if len(oduo.hooks) == 0 {
		node, err = oduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundDealMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oduo.mutation = mutation
			node, err = oduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oduo.hooks) - 1; i >= 0; i-- {
			mut = oduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oduo *OutboundDealUpdateOne) SaveX(ctx context.Context) *OutboundDeal {
	node, err := oduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oduo *OutboundDealUpdateOne) Exec(ctx context.Context) error {
	_, err := oduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oduo *OutboundDealUpdateOne) ExecX(ctx context.Context) {
	if err := oduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oduo *OutboundDealUpdateOne) sqlSave(ctx context.Context) (_node *OutboundDeal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outbounddeal.Table,
			Columns: outbounddeal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: outbounddeal.FieldID,
			},
		},
	}
	id, ok := oduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OutboundDeal.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := oduo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldQuantity,
		})
	}
	if value, ok := oduo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldQuantity,
		})
	}
	if value, ok := oduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldAmount,
		})
	}
	if value, ok := oduo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldAmount,
		})
	}
	if oduo.mutation.VariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   outbounddeal.VariantTable,
			Columns: []string{outbounddeal.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oduo.mutation.VariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   outbounddeal.VariantTable,
			Columns: []string{outbounddeal.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oduo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outbounddeal.ParentTable,
			Columns: []string{outbounddeal.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oduo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outbounddeal.ParentTable,
			Columns: []string{outbounddeal.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oduo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outbounddeal.ChildrenTable,
			Columns: []string{outbounddeal.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oduo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !oduo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outbounddeal.ChildrenTable,
			Columns: []string{outbounddeal.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oduo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outbounddeal.ChildrenTable,
			Columns: []string{outbounddeal.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oduo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outbounddeal.TransactionTable,
			Columns: []string{outbounddeal.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oduo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outbounddeal.TransactionTable,
			Columns: []string{outbounddeal.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OutboundDeal{config: oduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, oduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outbounddeal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
