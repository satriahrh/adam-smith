// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/build/ent/variant"
	"github.com/satriahrh/adam-smith/build/ent/variation"
)

// VariationCreate is the builder for creating a Variation entity.
type VariationCreate struct {
	config
	mutation *VariationMutation
	hooks    []Hook
}

// SetType sets the type field.
func (vc *VariationCreate) SetType(s string) *VariationCreate {
	vc.mutation.SetType(s)
	return vc
}

// SetValue sets the value field.
func (vc *VariationCreate) SetValue(s string) *VariationCreate {
	vc.mutation.SetValue(s)
	return vc
}

// AddVariantIDs adds the variants edge to Variant by ids.
func (vc *VariationCreate) AddVariantIDs(ids ...uint64) *VariationCreate {
	vc.mutation.AddVariantIDs(ids...)
	return vc
}

// AddVariants adds the variants edges to Variant.
func (vc *VariationCreate) AddVariants(v ...*Variant) *VariationCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vc.AddVariantIDs(ids...)
}

// Mutation returns the VariationMutation object of the builder.
func (vc *VariationCreate) Mutation() *VariationMutation {
	return vc.mutation
}

// Save creates the Variation in the database.
func (vc *VariationCreate) Save(ctx context.Context) (*Variation, error) {
	var (
		err  error
		node *Variation
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VariationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			node, err = vc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VariationCreate) SaveX(ctx context.Context) *Variation {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (vc *VariationCreate) check() error {
	if _, ok := vc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := vc.mutation.GetType(); ok {
		if err := variation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := vc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New("ent: missing required field \"value\"")}
	}
	if v, ok := vc.mutation.Value(); ok {
		if err := variation.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf("ent: validator failed for field \"value\": %w", err)}
		}
	}
	return nil
}

func (vc *VariationCreate) sqlSave(ctx context.Context) (*Variation, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (vc *VariationCreate) createSpec() (*Variation, *sqlgraph.CreateSpec) {
	var (
		_node = &Variation{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: variation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: variation.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variation.FieldType,
		})
		_node.Type = value
	}
	if value, ok := vc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variation.FieldValue,
		})
		_node.Value = value
	}
	if nodes := vc.mutation.VariantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   variation.VariantsTable,
			Columns: []string{variation.VariantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VariationCreateBulk is the builder for creating a bulk of Variation entities.
type VariationCreateBulk struct {
	config
	builders []*VariationCreate
}

// Save creates the Variation entities in the database.
func (vcb *VariationCreateBulk) Save(ctx context.Context) ([]*Variation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Variation, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VariationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = uint64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (vcb *VariationCreateBulk) SaveX(ctx context.Context) []*Variation {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
