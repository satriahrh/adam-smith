// Code generated by entc, DO NOT EDIT.

package variant

const (
	// Label holds the string label denoting the variant type in the database.
	Label = "variant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"

	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeVariation holds the string denoting the variation edge name in mutations.
	EdgeVariation = "variation"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeOutboundDeals holds the string denoting the outbound_deals edge name in mutations.
	EdgeOutboundDeals = "outbound_deals"

	// Table holds the table name of the variant in the database.
	Table = "variants"
	// ParentTable is the table the holds the parent relation/edge.
	ParentTable = "variants"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "variant_children"
	// ChildrenTable is the table the holds the children relation/edge.
	ChildrenTable = "variants"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "variant_children"
	// VariationTable is the table the holds the variation relation/edge.
	VariationTable = "variants"
	// VariationInverseTable is the table name for the Variation entity.
	// It exists in this package in order to avoid circular dependency with the "variation" package.
	VariationInverseTable = "variations"
	// VariationColumn is the table column denoting the variation relation/edge.
	VariationColumn = "variant_variation"
	// ProductTable is the table the holds the product relation/edge.
	ProductTable = "variants"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_variants"
	// OutboundDealsTable is the table the holds the outbound_deals relation/edge.
	OutboundDealsTable = "outbound_deals"
	// OutboundDealsInverseTable is the table name for the OutboundDeal entity.
	// It exists in this package in order to avoid circular dependency with the "outbounddeal" package.
	OutboundDealsInverseTable = "outbound_deals"
	// OutboundDealsColumn is the table column denoting the outbound_deals relation/edge.
	OutboundDealsColumn = "outbound_deal_variant"
)

// Columns holds all SQL columns for variant fields.
var Columns = []string{
	FieldID,
	FieldImages,
	FieldStock,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Variant type.
var ForeignKeys = []string{
	"product_variants",
	"variant_children",
	"variant_variation",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStock holds the default value on creation for the stock field.
	DefaultStock uint32
	// DefaultPrice holds the default value on creation for the price field.
	DefaultPrice uint32
)
