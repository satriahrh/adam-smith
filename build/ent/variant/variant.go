// Code generated by entc, DO NOT EDIT.

package variant

import (
	"fmt"
)

const (
	// Label holds the string label denoting the variant type in the database.
	Label = "variant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"

	// EdgeVariations holds the string denoting the variations edge name in mutations.
	EdgeVariations = "variations"

	// Table holds the table name of the variant in the database.
	Table = "variants"
	// VariationsTable is the table the holds the variations relation/edge.
	VariationsTable = "variations"
	// VariationsInverseTable is the table name for the Variation entity.
	// It exists in this package in order to avoid circular dependency with the "variation" package.
	VariationsInverseTable = "variations"
	// VariationsColumn is the table column denoting the variations relation/edge.
	VariationsColumn = "variation_variant"
)

// Columns holds all SQL columns for variant fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the type enum field.
type Type string

// Type values.
const (
	TypeColor Type = "color"
	TypeSize  Type = "size"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeColor, TypeSize:
		return nil
	default:
		return fmt.Errorf("variant: invalid enum value for type field: %q", _type)
	}
}
