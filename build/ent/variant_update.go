// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/build/ent/predicate"
	"github.com/satriahrh/adam-smith/build/ent/variant"
	"github.com/satriahrh/adam-smith/build/ent/variation"
)

// VariantUpdate is the builder for updating Variant entities.
type VariantUpdate struct {
	config
	hooks    []Hook
	mutation *VariantMutation
}

// Where adds a new predicate for the builder.
func (vu *VariantUpdate) Where(ps ...predicate.Variant) *VariantUpdate {
	vu.mutation.predicates = append(vu.mutation.predicates, ps...)
	return vu
}

// SetType sets the type field.
func (vu *VariantUpdate) SetType(v variant.Type) *VariantUpdate {
	vu.mutation.SetType(v)
	return vu
}

// SetValue sets the value field.
func (vu *VariantUpdate) SetValue(s string) *VariantUpdate {
	vu.mutation.SetValue(s)
	return vu
}

// AddVariationIDs adds the variations edge to Variation by ids.
func (vu *VariantUpdate) AddVariationIDs(ids ...uint64) *VariantUpdate {
	vu.mutation.AddVariationIDs(ids...)
	return vu
}

// AddVariations adds the variations edges to Variation.
func (vu *VariantUpdate) AddVariations(v ...*Variation) *VariantUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddVariationIDs(ids...)
}

// Mutation returns the VariantMutation object of the builder.
func (vu *VariantUpdate) Mutation() *VariantMutation {
	return vu.mutation
}

// ClearVariations clears all "variations" edges to type Variation.
func (vu *VariantUpdate) ClearVariations() *VariantUpdate {
	vu.mutation.ClearVariations()
	return vu
}

// RemoveVariationIDs removes the variations edge to Variation by ids.
func (vu *VariantUpdate) RemoveVariationIDs(ids ...uint64) *VariantUpdate {
	vu.mutation.RemoveVariationIDs(ids...)
	return vu
}

// RemoveVariations removes variations edges to Variation.
func (vu *VariantUpdate) RemoveVariations(v ...*Variation) *VariantUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveVariationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VariantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VariantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VariantUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VariantUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VariantUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VariantUpdate) check() error {
	if v, ok := vu.mutation.GetType(); ok {
		if err := variant.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (vu *VariantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   variant.Table,
			Columns: variant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: variant.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: variant.FieldType,
		})
	}
	if value, ok := vu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variant.FieldValue,
		})
	}
	if vu.mutation.VariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   variant.VariationsTable,
			Columns: variant.VariationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVariationsIDs(); len(nodes) > 0 && !vu.mutation.VariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   variant.VariationsTable,
			Columns: variant.VariationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VariationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   variant.VariationsTable,
			Columns: variant.VariationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{variant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VariantUpdateOne is the builder for updating a single Variant entity.
type VariantUpdateOne struct {
	config
	hooks    []Hook
	mutation *VariantMutation
}

// SetType sets the type field.
func (vuo *VariantUpdateOne) SetType(v variant.Type) *VariantUpdateOne {
	vuo.mutation.SetType(v)
	return vuo
}

// SetValue sets the value field.
func (vuo *VariantUpdateOne) SetValue(s string) *VariantUpdateOne {
	vuo.mutation.SetValue(s)
	return vuo
}

// AddVariationIDs adds the variations edge to Variation by ids.
func (vuo *VariantUpdateOne) AddVariationIDs(ids ...uint64) *VariantUpdateOne {
	vuo.mutation.AddVariationIDs(ids...)
	return vuo
}

// AddVariations adds the variations edges to Variation.
func (vuo *VariantUpdateOne) AddVariations(v ...*Variation) *VariantUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddVariationIDs(ids...)
}

// Mutation returns the VariantMutation object of the builder.
func (vuo *VariantUpdateOne) Mutation() *VariantMutation {
	return vuo.mutation
}

// ClearVariations clears all "variations" edges to type Variation.
func (vuo *VariantUpdateOne) ClearVariations() *VariantUpdateOne {
	vuo.mutation.ClearVariations()
	return vuo
}

// RemoveVariationIDs removes the variations edge to Variation by ids.
func (vuo *VariantUpdateOne) RemoveVariationIDs(ids ...uint64) *VariantUpdateOne {
	vuo.mutation.RemoveVariationIDs(ids...)
	return vuo
}

// RemoveVariations removes variations edges to Variation.
func (vuo *VariantUpdateOne) RemoveVariations(v ...*Variation) *VariantUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveVariationIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (vuo *VariantUpdateOne) Save(ctx context.Context) (*Variant, error) {
	var (
		err  error
		node *Variant
	)
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VariantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VariantUpdateOne) SaveX(ctx context.Context) *Variant {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VariantUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VariantUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VariantUpdateOne) check() error {
	if v, ok := vuo.mutation.GetType(); ok {
		if err := variant.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (vuo *VariantUpdateOne) sqlSave(ctx context.Context) (_node *Variant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   variant.Table,
			Columns: variant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: variant.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Variant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: variant.FieldType,
		})
	}
	if value, ok := vuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variant.FieldValue,
		})
	}
	if vuo.mutation.VariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   variant.VariationsTable,
			Columns: variant.VariationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVariationsIDs(); len(nodes) > 0 && !vuo.mutation.VariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   variant.VariationsTable,
			Columns: variant.VariationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VariationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   variant.VariationsTable,
			Columns: variant.VariationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Variant{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{variant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
