// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/build/ent/outbounddeal"
	"github.com/satriahrh/adam-smith/build/ent/product"
	"github.com/satriahrh/adam-smith/build/ent/variant"
	"github.com/satriahrh/adam-smith/build/ent/variation"
)

// VariantCreate is the builder for creating a Variant entity.
type VariantCreate struct {
	config
	mutation *VariantMutation
	hooks    []Hook
}

// SetImages sets the images field.
func (vc *VariantCreate) SetImages(s []string) *VariantCreate {
	vc.mutation.SetImages(s)
	return vc
}

// SetStock sets the stock field.
func (vc *VariantCreate) SetStock(u uint32) *VariantCreate {
	vc.mutation.SetStock(u)
	return vc
}

// SetNillableStock sets the stock field if the given value is not nil.
func (vc *VariantCreate) SetNillableStock(u *uint32) *VariantCreate {
	if u != nil {
		vc.SetStock(*u)
	}
	return vc
}

// SetPrice sets the price field.
func (vc *VariantCreate) SetPrice(u uint32) *VariantCreate {
	vc.mutation.SetPrice(u)
	return vc
}

// SetNillablePrice sets the price field if the given value is not nil.
func (vc *VariantCreate) SetNillablePrice(u *uint32) *VariantCreate {
	if u != nil {
		vc.SetPrice(*u)
	}
	return vc
}

// SetParentID sets the parent edge to Variant by id.
func (vc *VariantCreate) SetParentID(id uint64) *VariantCreate {
	vc.mutation.SetParentID(id)
	return vc
}

// SetNillableParentID sets the parent edge to Variant by id if the given value is not nil.
func (vc *VariantCreate) SetNillableParentID(id *uint64) *VariantCreate {
	if id != nil {
		vc = vc.SetParentID(*id)
	}
	return vc
}

// SetParent sets the parent edge to Variant.
func (vc *VariantCreate) SetParent(v *Variant) *VariantCreate {
	return vc.SetParentID(v.ID)
}

// AddChildIDs adds the children edge to Variant by ids.
func (vc *VariantCreate) AddChildIDs(ids ...uint64) *VariantCreate {
	vc.mutation.AddChildIDs(ids...)
	return vc
}

// AddChildren adds the children edges to Variant.
func (vc *VariantCreate) AddChildren(v ...*Variant) *VariantCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vc.AddChildIDs(ids...)
}

// SetVariationID sets the variation edge to Variation by id.
func (vc *VariantCreate) SetVariationID(id uint64) *VariantCreate {
	vc.mutation.SetVariationID(id)
	return vc
}

// SetNillableVariationID sets the variation edge to Variation by id if the given value is not nil.
func (vc *VariantCreate) SetNillableVariationID(id *uint64) *VariantCreate {
	if id != nil {
		vc = vc.SetVariationID(*id)
	}
	return vc
}

// SetVariation sets the variation edge to Variation.
func (vc *VariantCreate) SetVariation(v *Variation) *VariantCreate {
	return vc.SetVariationID(v.ID)
}

// SetProductID sets the product edge to Product by id.
func (vc *VariantCreate) SetProductID(id uint64) *VariantCreate {
	vc.mutation.SetProductID(id)
	return vc
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (vc *VariantCreate) SetNillableProductID(id *uint64) *VariantCreate {
	if id != nil {
		vc = vc.SetProductID(*id)
	}
	return vc
}

// SetProduct sets the product edge to Product.
func (vc *VariantCreate) SetProduct(p *Product) *VariantCreate {
	return vc.SetProductID(p.ID)
}

// AddOutboundDealIDs adds the outbound_deals edge to OutboundDeal by ids.
func (vc *VariantCreate) AddOutboundDealIDs(ids ...uint64) *VariantCreate {
	vc.mutation.AddOutboundDealIDs(ids...)
	return vc
}

// AddOutboundDeals adds the outbound_deals edges to OutboundDeal.
func (vc *VariantCreate) AddOutboundDeals(o ...*OutboundDeal) *VariantCreate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return vc.AddOutboundDealIDs(ids...)
}

// Mutation returns the VariantMutation object of the builder.
func (vc *VariantCreate) Mutation() *VariantMutation {
	return vc.mutation
}

// Save creates the Variant in the database.
func (vc *VariantCreate) Save(ctx context.Context) (*Variant, error) {
	var (
		err  error
		node *Variant
	)
	vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VariantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			node, err = vc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VariantCreate) SaveX(ctx context.Context) *Variant {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (vc *VariantCreate) defaults() {
	if _, ok := vc.mutation.Stock(); !ok {
		v := variant.DefaultStock
		vc.mutation.SetStock(v)
	}
	if _, ok := vc.mutation.Price(); !ok {
		v := variant.DefaultPrice
		vc.mutation.SetPrice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VariantCreate) check() error {
	if _, ok := vc.mutation.Stock(); !ok {
		return &ValidationError{Name: "stock", err: errors.New("ent: missing required field \"stock\"")}
	}
	if _, ok := vc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New("ent: missing required field \"price\"")}
	}
	return nil
}

func (vc *VariantCreate) sqlSave(ctx context.Context) (*Variant, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (vc *VariantCreate) createSpec() (*Variant, *sqlgraph.CreateSpec) {
	var (
		_node = &Variant{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: variant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: variant.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.Images(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: variant.FieldImages,
		})
		_node.Images = value
	}
	if value, ok := vc.mutation.Stock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: variant.FieldStock,
		})
		_node.Stock = value
	}
	if value, ok := vc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: variant.FieldPrice,
		})
		_node.Price = value
	}
	if nodes := vc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.ParentTable,
			Columns: []string{variant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   variant.ChildrenTable,
			Columns: []string{variant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.VariationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   variant.VariationTable,
			Columns: []string{variant.VariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: variation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variant.ProductTable,
			Columns: []string{variant.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.OutboundDealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   variant.OutboundDealsTable,
			Columns: []string{variant.OutboundDealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VariantCreateBulk is the builder for creating a bulk of Variant entities.
type VariantCreateBulk struct {
	config
	builders []*VariantCreate
}

// Save creates the Variant entities in the database.
func (vcb *VariantCreateBulk) Save(ctx context.Context) ([]*Variant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Variant, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VariantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = uint64(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (vcb *VariantCreateBulk) SaveX(ctx context.Context) []*Variant {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
