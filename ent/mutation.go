// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/satriahrh/adam-smith/ent/predicate"
	"github.com/satriahrh/adam-smith/ent/product"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProduct = "Product"
)

// ProductMutation represents an operation that mutate the Products
// nodes in the graph.
type ProductMutation struct {
	config
	op           Op
	typ          string
	id           *int
	name         *string
	descriptions *[]struct {
		Heading string "json:\"heading\""
		Body    string "json:\"body\""
	}
	images *struct {
		Thumbnail string   "json:\"thumbnail\""
		Displays  []string "json:\"displays\""
		Variants  []string "json:\"variants\""
	}
	marketplaces *struct {
		Tokopedia string "json:\"tokopedia\""
		Shopee    string "json:\"shopee\""
		Bukalapak string "json:\"bukalapak\""
	}
	prices        *[]uint
	stocks        *[]uint
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Product, error)
	predicates    []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows to manage the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for Product.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the id field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetDescriptions sets the descriptions field.
func (m *ProductMutation) SetDescriptions(s []struct {
	Heading string "json:\"heading\""
	Body    string "json:\"body\""
}) {
	m.descriptions = &s
}

// Descriptions returns the descriptions value in the mutation.
func (m *ProductMutation) Descriptions() (r []struct {
	Heading string "json:\"heading\""
	Body    string "json:\"body\""
}, exists bool) {
	v := m.descriptions
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptions returns the old descriptions value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldDescriptions(ctx context.Context) (v []struct {
	Heading string "json:\"heading\""
	Body    string "json:\"body\""
}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescriptions is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescriptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptions: %w", err)
	}
	return oldValue.Descriptions, nil
}

// ResetDescriptions reset all changes of the "descriptions" field.
func (m *ProductMutation) ResetDescriptions() {
	m.descriptions = nil
}

// SetImages sets the images field.
func (m *ProductMutation) SetImages(s struct {
	Thumbnail string   "json:\"thumbnail\""
	Displays  []string "json:\"displays\""
	Variants  []string "json:\"variants\""
}) {
	m.images = &s
}

// Images returns the images value in the mutation.
func (m *ProductMutation) Images() (r struct {
	Thumbnail string   "json:\"thumbnail\""
	Displays  []string "json:\"displays\""
	Variants  []string "json:\"variants\""
}, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old images value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldImages(ctx context.Context) (v struct {
	Thumbnail string   "json:\"thumbnail\""
	Displays  []string "json:\"displays\""
	Variants  []string "json:\"variants\""
}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImages is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// ResetImages reset all changes of the "images" field.
func (m *ProductMutation) ResetImages() {
	m.images = nil
}

// SetMarketplaces sets the marketplaces field.
func (m *ProductMutation) SetMarketplaces(s struct {
	Tokopedia string "json:\"tokopedia\""
	Shopee    string "json:\"shopee\""
	Bukalapak string "json:\"bukalapak\""
}) {
	m.marketplaces = &s
}

// Marketplaces returns the marketplaces value in the mutation.
func (m *ProductMutation) Marketplaces() (r struct {
	Tokopedia string "json:\"tokopedia\""
	Shopee    string "json:\"shopee\""
	Bukalapak string "json:\"bukalapak\""
}, exists bool) {
	v := m.marketplaces
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketplaces returns the old marketplaces value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldMarketplaces(ctx context.Context) (v struct {
	Tokopedia string "json:\"tokopedia\""
	Shopee    string "json:\"shopee\""
	Bukalapak string "json:\"bukalapak\""
}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarketplaces is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarketplaces requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketplaces: %w", err)
	}
	return oldValue.Marketplaces, nil
}

// ResetMarketplaces reset all changes of the "marketplaces" field.
func (m *ProductMutation) ResetMarketplaces() {
	m.marketplaces = nil
}

// SetPrices sets the prices field.
func (m *ProductMutation) SetPrices(u []uint) {
	m.prices = &u
}

// Prices returns the prices value in the mutation.
func (m *ProductMutation) Prices() (r []uint, exists bool) {
	v := m.prices
	if v == nil {
		return
	}
	return *v, true
}

// OldPrices returns the old prices value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldPrices(ctx context.Context) (v []uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrices is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrices requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrices: %w", err)
	}
	return oldValue.Prices, nil
}

// ResetPrices reset all changes of the "prices" field.
func (m *ProductMutation) ResetPrices() {
	m.prices = nil
}

// SetStocks sets the stocks field.
func (m *ProductMutation) SetStocks(u []uint) {
	m.stocks = &u
}

// Stocks returns the stocks value in the mutation.
func (m *ProductMutation) Stocks() (r []uint, exists bool) {
	v := m.stocks
	if v == nil {
		return
	}
	return *v, true
}

// OldStocks returns the old stocks value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldStocks(ctx context.Context) (v []uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStocks is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStocks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStocks: %w", err)
	}
	return oldValue.Stocks, nil
}

// ResetStocks reset all changes of the "stocks" field.
func (m *ProductMutation) ResetStocks() {
	m.stocks = nil
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.descriptions != nil {
		fields = append(fields, product.FieldDescriptions)
	}
	if m.images != nil {
		fields = append(fields, product.FieldImages)
	}
	if m.marketplaces != nil {
		fields = append(fields, product.FieldMarketplaces)
	}
	if m.prices != nil {
		fields = append(fields, product.FieldPrices)
	}
	if m.stocks != nil {
		fields = append(fields, product.FieldStocks)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldName:
		return m.Name()
	case product.FieldDescriptions:
		return m.Descriptions()
	case product.FieldImages:
		return m.Images()
	case product.FieldMarketplaces:
		return m.Marketplaces()
	case product.FieldPrices:
		return m.Prices()
	case product.FieldStocks:
		return m.Stocks()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldDescriptions:
		return m.OldDescriptions(ctx)
	case product.FieldImages:
		return m.OldImages(ctx)
	case product.FieldMarketplaces:
		return m.OldMarketplaces(ctx)
	case product.FieldPrices:
		return m.OldPrices(ctx)
	case product.FieldStocks:
		return m.OldStocks(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldDescriptions:
		v, ok := value.([]struct {
			Heading string "json:\"heading\""
			Body    string "json:\"body\""
		})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptions(v)
		return nil
	case product.FieldImages:
		v, ok := value.(struct {
			Thumbnail string   "json:\"thumbnail\""
			Displays  []string "json:\"displays\""
			Variants  []string "json:\"variants\""
		})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	case product.FieldMarketplaces:
		v, ok := value.(struct {
			Tokopedia string "json:\"tokopedia\""
			Shopee    string "json:\"shopee\""
			Bukalapak string "json:\"bukalapak\""
		})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketplaces(v)
		return nil
	case product.FieldPrices:
		v, ok := value.([]uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrices(v)
		return nil
	case product.FieldStocks:
		v, ok := value.([]uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStocks(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldDescriptions:
		m.ResetDescriptions()
		return nil
	case product.FieldImages:
		m.ResetImages()
		return nil
	case product.FieldMarketplaces:
		m.ResetMarketplaces()
		return nil
	case product.FieldPrices:
		m.ResetPrices()
		return nil
	case product.FieldStocks:
		m.ResetStocks()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Product edge %s", name)
}
