// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/ent/outbounddeal"
	"github.com/satriahrh/adam-smith/ent/outboundtransaction"
	"github.com/satriahrh/adam-smith/ent/variation"
)

// OutboundDealCreate is the builder for creating a OutboundDeal entity.
type OutboundDealCreate struct {
	config
	mutation *OutboundDealMutation
	hooks    []Hook
}

// SetQuantity sets the quantity field.
func (odc *OutboundDealCreate) SetQuantity(u uint) *OutboundDealCreate {
	odc.mutation.SetQuantity(u)
	return odc
}

// SetAmount sets the amount field.
func (odc *OutboundDealCreate) SetAmount(u uint) *OutboundDealCreate {
	odc.mutation.SetAmount(u)
	return odc
}

// SetVariationID sets the variation edge to Variation by id.
func (odc *OutboundDealCreate) SetVariationID(id int) *OutboundDealCreate {
	odc.mutation.SetVariationID(id)
	return odc
}

// SetNillableVariationID sets the variation edge to Variation by id if the given value is not nil.
func (odc *OutboundDealCreate) SetNillableVariationID(id *int) *OutboundDealCreate {
	if id != nil {
		odc = odc.SetVariationID(*id)
	}
	return odc
}

// SetVariation sets the variation edge to Variation.
func (odc *OutboundDealCreate) SetVariation(v *Variation) *OutboundDealCreate {
	return odc.SetVariationID(v.ID)
}

// AddTransactionIDs adds the transaction edge to OutboundTransaction by ids.
func (odc *OutboundDealCreate) AddTransactionIDs(ids ...int) *OutboundDealCreate {
	odc.mutation.AddTransactionIDs(ids...)
	return odc
}

// AddTransaction adds the transaction edges to OutboundTransaction.
func (odc *OutboundDealCreate) AddTransaction(o ...*OutboundTransaction) *OutboundDealCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return odc.AddTransactionIDs(ids...)
}

// Mutation returns the OutboundDealMutation object of the builder.
func (odc *OutboundDealCreate) Mutation() *OutboundDealMutation {
	return odc.mutation
}

// Save creates the OutboundDeal in the database.
func (odc *OutboundDealCreate) Save(ctx context.Context) (*OutboundDeal, error) {
	var (
		err  error
		node *OutboundDeal
	)
	if len(odc.hooks) == 0 {
		if err = odc.check(); err != nil {
			return nil, err
		}
		node, err = odc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundDealMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = odc.check(); err != nil {
				return nil, err
			}
			odc.mutation = mutation
			node, err = odc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(odc.hooks) - 1; i >= 0; i-- {
			mut = odc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, odc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (odc *OutboundDealCreate) SaveX(ctx context.Context) *OutboundDeal {
	v, err := odc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (odc *OutboundDealCreate) check() error {
	if _, ok := odc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New("ent: missing required field \"quantity\"")}
	}
	if _, ok := odc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New("ent: missing required field \"amount\"")}
	}
	return nil
}

func (odc *OutboundDealCreate) sqlSave(ctx context.Context) (*OutboundDeal, error) {
	_node, _spec := odc.createSpec()
	if err := sqlgraph.CreateNode(ctx, odc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (odc *OutboundDealCreate) createSpec() (*OutboundDeal, *sqlgraph.CreateSpec) {
	var (
		_node = &OutboundDeal{config: odc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: outbounddeal.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outbounddeal.FieldID,
			},
		}
	)
	if value, ok := odc.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := odc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outbounddeal.FieldAmount,
		})
		_node.Amount = value
	}
	if nodes := odc.mutation.VariationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   outbounddeal.VariationTable,
			Columns: []string{outbounddeal.VariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: variation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := odc.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   outbounddeal.TransactionTable,
			Columns: outbounddeal.TransactionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OutboundDealCreateBulk is the builder for creating a bulk of OutboundDeal entities.
type OutboundDealCreateBulk struct {
	config
	builders []*OutboundDealCreate
}

// Save creates the OutboundDeal entities in the database.
func (odcb *OutboundDealCreateBulk) Save(ctx context.Context) ([]*OutboundDeal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(odcb.builders))
	nodes := make([]*OutboundDeal, len(odcb.builders))
	mutators := make([]Mutator, len(odcb.builders))
	for i := range odcb.builders {
		func(i int, root context.Context) {
			builder := odcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutboundDealMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, odcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, odcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, odcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (odcb *OutboundDealCreateBulk) SaveX(ctx context.Context) []*OutboundDeal {
	v, err := odcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
