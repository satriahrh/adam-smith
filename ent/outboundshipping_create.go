// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/ent/outboundshipping"
	"github.com/satriahrh/adam-smith/ent/outboundtransaction"
)

// OutboundShippingCreate is the builder for creating a OutboundShipping entity.
type OutboundShippingCreate struct {
	config
	mutation *OutboundShippingMutation
	hooks    []Hook
}

// SetCourier sets the courier field.
func (osc *OutboundShippingCreate) SetCourier(o outboundshipping.Courier) *OutboundShippingCreate {
	osc.mutation.SetCourier(o)
	return osc
}

// SetCourierTrackingCode sets the courier_tracking_code field.
func (osc *OutboundShippingCreate) SetCourierTrackingCode(s string) *OutboundShippingCreate {
	osc.mutation.SetCourierTrackingCode(s)
	return osc
}

// SetType sets the type field.
func (osc *OutboundShippingCreate) SetType(o outboundshipping.Type) *OutboundShippingCreate {
	osc.mutation.SetType(o)
	return osc
}

// SetState sets the state field.
func (osc *OutboundShippingCreate) SetState(o outboundshipping.State) *OutboundShippingCreate {
	osc.mutation.SetState(o)
	return osc
}

// SetConsignee sets the consignee field.
func (osc *OutboundShippingCreate) SetConsignee(s string) *OutboundShippingCreate {
	osc.mutation.SetConsignee(s)
	return osc
}

// SetConsigneePhone sets the consignee_phone field.
func (osc *OutboundShippingCreate) SetConsigneePhone(s string) *OutboundShippingCreate {
	osc.mutation.SetConsigneePhone(s)
	return osc
}

// SetAddress sets the address field.
func (osc *OutboundShippingCreate) SetAddress(s string) *OutboundShippingCreate {
	osc.mutation.SetAddress(s)
	return osc
}

// SetPostalCode sets the postal_code field.
func (osc *OutboundShippingCreate) SetPostalCode(u uint) *OutboundShippingCreate {
	osc.mutation.SetPostalCode(u)
	return osc
}

// SetCost sets the cost field.
func (osc *OutboundShippingCreate) SetCost(u uint) *OutboundShippingCreate {
	osc.mutation.SetCost(u)
	return osc
}

// SetTransactionID sets the transaction edge to OutboundTransaction by id.
func (osc *OutboundShippingCreate) SetTransactionID(id int) *OutboundShippingCreate {
	osc.mutation.SetTransactionID(id)
	return osc
}

// SetNillableTransactionID sets the transaction edge to OutboundTransaction by id if the given value is not nil.
func (osc *OutboundShippingCreate) SetNillableTransactionID(id *int) *OutboundShippingCreate {
	if id != nil {
		osc = osc.SetTransactionID(*id)
	}
	return osc
}

// SetTransaction sets the transaction edge to OutboundTransaction.
func (osc *OutboundShippingCreate) SetTransaction(o *OutboundTransaction) *OutboundShippingCreate {
	return osc.SetTransactionID(o.ID)
}

// Mutation returns the OutboundShippingMutation object of the builder.
func (osc *OutboundShippingCreate) Mutation() *OutboundShippingMutation {
	return osc.mutation
}

// Save creates the OutboundShipping in the database.
func (osc *OutboundShippingCreate) Save(ctx context.Context) (*OutboundShipping, error) {
	var (
		err  error
		node *OutboundShipping
	)
	if len(osc.hooks) == 0 {
		if err = osc.check(); err != nil {
			return nil, err
		}
		node, err = osc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundShippingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osc.check(); err != nil {
				return nil, err
			}
			osc.mutation = mutation
			node, err = osc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(osc.hooks) - 1; i >= 0; i-- {
			mut = osc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OutboundShippingCreate) SaveX(ctx context.Context) *OutboundShipping {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (osc *OutboundShippingCreate) check() error {
	if _, ok := osc.mutation.Courier(); !ok {
		return &ValidationError{Name: "courier", err: errors.New("ent: missing required field \"courier\"")}
	}
	if v, ok := osc.mutation.Courier(); ok {
		if err := outboundshipping.CourierValidator(v); err != nil {
			return &ValidationError{Name: "courier", err: fmt.Errorf("ent: validator failed for field \"courier\": %w", err)}
		}
	}
	if _, ok := osc.mutation.CourierTrackingCode(); !ok {
		return &ValidationError{Name: "courier_tracking_code", err: errors.New("ent: missing required field \"courier_tracking_code\"")}
	}
	if _, ok := osc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := osc.mutation.GetType(); ok {
		if err := outboundshipping.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := osc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New("ent: missing required field \"state\"")}
	}
	if v, ok := osc.mutation.State(); ok {
		if err := outboundshipping.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := osc.mutation.Consignee(); !ok {
		return &ValidationError{Name: "consignee", err: errors.New("ent: missing required field \"consignee\"")}
	}
	if _, ok := osc.mutation.ConsigneePhone(); !ok {
		return &ValidationError{Name: "consignee_phone", err: errors.New("ent: missing required field \"consignee_phone\"")}
	}
	if _, ok := osc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New("ent: missing required field \"address\"")}
	}
	if _, ok := osc.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New("ent: missing required field \"postal_code\"")}
	}
	if _, ok := osc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New("ent: missing required field \"cost\"")}
	}
	return nil
}

func (osc *OutboundShippingCreate) sqlSave(ctx context.Context) (*OutboundShipping, error) {
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (osc *OutboundShippingCreate) createSpec() (*OutboundShipping, *sqlgraph.CreateSpec) {
	var (
		_node = &OutboundShipping{config: osc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: outboundshipping.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outboundshipping.FieldID,
			},
		}
	)
	if value, ok := osc.mutation.Courier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldCourier,
		})
		_node.Courier = value
	}
	if value, ok := osc.mutation.CourierTrackingCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldCourierTrackingCode,
		})
		_node.CourierTrackingCode = value
	}
	if value, ok := osc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldType,
		})
		_node.Type = value
	}
	if value, ok := osc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldState,
		})
		_node.State = value
	}
	if value, ok := osc.mutation.Consignee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldConsignee,
		})
		_node.Consignee = value
	}
	if value, ok := osc.mutation.ConsigneePhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldConsigneePhone,
		})
		_node.ConsigneePhone = value
	}
	if value, ok := osc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := osc.mutation.PostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldPostalCode,
		})
		_node.PostalCode = value
	}
	if value, ok := osc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldCost,
		})
		_node.Cost = value
	}
	if nodes := osc.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   outboundshipping.TransactionTable,
			Columns: []string{outboundshipping.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OutboundShippingCreateBulk is the builder for creating a bulk of OutboundShipping entities.
type OutboundShippingCreateBulk struct {
	config
	builders []*OutboundShippingCreate
}

// Save creates the OutboundShipping entities in the database.
func (oscb *OutboundShippingCreateBulk) Save(ctx context.Context) ([]*OutboundShipping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OutboundShipping, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutboundShippingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (oscb *OutboundShippingCreateBulk) SaveX(ctx context.Context) []*OutboundShipping {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
