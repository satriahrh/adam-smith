// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/ent/outboundshipping"
	"github.com/satriahrh/adam-smith/ent/outboundtransaction"
	"github.com/satriahrh/adam-smith/ent/predicate"
)

// OutboundShippingUpdate is the builder for updating OutboundShipping entities.
type OutboundShippingUpdate struct {
	config
	hooks    []Hook
	mutation *OutboundShippingMutation
}

// Where adds a new predicate for the builder.
func (osu *OutboundShippingUpdate) Where(ps ...predicate.OutboundShipping) *OutboundShippingUpdate {
	osu.mutation.predicates = append(osu.mutation.predicates, ps...)
	return osu
}

// SetCourier sets the courier field.
func (osu *OutboundShippingUpdate) SetCourier(o outboundshipping.Courier) *OutboundShippingUpdate {
	osu.mutation.SetCourier(o)
	return osu
}

// SetCourierTrackingCode sets the courier_tracking_code field.
func (osu *OutboundShippingUpdate) SetCourierTrackingCode(s string) *OutboundShippingUpdate {
	osu.mutation.SetCourierTrackingCode(s)
	return osu
}

// SetType sets the type field.
func (osu *OutboundShippingUpdate) SetType(o outboundshipping.Type) *OutboundShippingUpdate {
	osu.mutation.SetType(o)
	return osu
}

// SetState sets the state field.
func (osu *OutboundShippingUpdate) SetState(o outboundshipping.State) *OutboundShippingUpdate {
	osu.mutation.SetState(o)
	return osu
}

// SetConsignee sets the consignee field.
func (osu *OutboundShippingUpdate) SetConsignee(s string) *OutboundShippingUpdate {
	osu.mutation.SetConsignee(s)
	return osu
}

// SetConsigneePhone sets the consignee_phone field.
func (osu *OutboundShippingUpdate) SetConsigneePhone(s string) *OutboundShippingUpdate {
	osu.mutation.SetConsigneePhone(s)
	return osu
}

// SetAddress sets the address field.
func (osu *OutboundShippingUpdate) SetAddress(s string) *OutboundShippingUpdate {
	osu.mutation.SetAddress(s)
	return osu
}

// SetPostalCode sets the postal_code field.
func (osu *OutboundShippingUpdate) SetPostalCode(u uint) *OutboundShippingUpdate {
	osu.mutation.ResetPostalCode()
	osu.mutation.SetPostalCode(u)
	return osu
}

// AddPostalCode adds u to postal_code.
func (osu *OutboundShippingUpdate) AddPostalCode(u uint) *OutboundShippingUpdate {
	osu.mutation.AddPostalCode(u)
	return osu
}

// SetCost sets the cost field.
func (osu *OutboundShippingUpdate) SetCost(u uint) *OutboundShippingUpdate {
	osu.mutation.ResetCost()
	osu.mutation.SetCost(u)
	return osu
}

// AddCost adds u to cost.
func (osu *OutboundShippingUpdate) AddCost(u uint) *OutboundShippingUpdate {
	osu.mutation.AddCost(u)
	return osu
}

// SetTransactionID sets the transaction edge to OutboundTransaction by id.
func (osu *OutboundShippingUpdate) SetTransactionID(id int) *OutboundShippingUpdate {
	osu.mutation.SetTransactionID(id)
	return osu
}

// SetNillableTransactionID sets the transaction edge to OutboundTransaction by id if the given value is not nil.
func (osu *OutboundShippingUpdate) SetNillableTransactionID(id *int) *OutboundShippingUpdate {
	if id != nil {
		osu = osu.SetTransactionID(*id)
	}
	return osu
}

// SetTransaction sets the transaction edge to OutboundTransaction.
func (osu *OutboundShippingUpdate) SetTransaction(o *OutboundTransaction) *OutboundShippingUpdate {
	return osu.SetTransactionID(o.ID)
}

// Mutation returns the OutboundShippingMutation object of the builder.
func (osu *OutboundShippingUpdate) Mutation() *OutboundShippingMutation {
	return osu.mutation
}

// ClearTransaction clears the "transaction" edge to type OutboundTransaction.
func (osu *OutboundShippingUpdate) ClearTransaction() *OutboundShippingUpdate {
	osu.mutation.ClearTransaction()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OutboundShippingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(osu.hooks) == 0 {
		if err = osu.check(); err != nil {
			return 0, err
		}
		affected, err = osu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundShippingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osu.check(); err != nil {
				return 0, err
			}
			osu.mutation = mutation
			affected, err = osu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(osu.hooks) - 1; i >= 0; i-- {
			mut = osu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OutboundShippingUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OutboundShippingUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OutboundShippingUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OutboundShippingUpdate) check() error {
	if v, ok := osu.mutation.Courier(); ok {
		if err := outboundshipping.CourierValidator(v); err != nil {
			return &ValidationError{Name: "courier", err: fmt.Errorf("ent: validator failed for field \"courier\": %w", err)}
		}
	}
	if v, ok := osu.mutation.GetType(); ok {
		if err := outboundshipping.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := osu.mutation.State(); ok {
		if err := outboundshipping.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	return nil
}

func (osu *OutboundShippingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outboundshipping.Table,
			Columns: outboundshipping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outboundshipping.FieldID,
			},
		},
	}
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.Courier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldCourier,
		})
	}
	if value, ok := osu.mutation.CourierTrackingCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldCourierTrackingCode,
		})
	}
	if value, ok := osu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldType,
		})
	}
	if value, ok := osu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldState,
		})
	}
	if value, ok := osu.mutation.Consignee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldConsignee,
		})
	}
	if value, ok := osu.mutation.ConsigneePhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldConsigneePhone,
		})
	}
	if value, ok := osu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldAddress,
		})
	}
	if value, ok := osu.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldPostalCode,
		})
	}
	if value, ok := osu.mutation.AddedPostalCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldPostalCode,
		})
	}
	if value, ok := osu.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldCost,
		})
	}
	if value, ok := osu.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldCost,
		})
	}
	if osu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   outboundshipping.TransactionTable,
			Columns: []string{outboundshipping.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   outboundshipping.TransactionTable,
			Columns: []string{outboundshipping.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outboundshipping.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OutboundShippingUpdateOne is the builder for updating a single OutboundShipping entity.
type OutboundShippingUpdateOne struct {
	config
	hooks    []Hook
	mutation *OutboundShippingMutation
}

// SetCourier sets the courier field.
func (osuo *OutboundShippingUpdateOne) SetCourier(o outboundshipping.Courier) *OutboundShippingUpdateOne {
	osuo.mutation.SetCourier(o)
	return osuo
}

// SetCourierTrackingCode sets the courier_tracking_code field.
func (osuo *OutboundShippingUpdateOne) SetCourierTrackingCode(s string) *OutboundShippingUpdateOne {
	osuo.mutation.SetCourierTrackingCode(s)
	return osuo
}

// SetType sets the type field.
func (osuo *OutboundShippingUpdateOne) SetType(o outboundshipping.Type) *OutboundShippingUpdateOne {
	osuo.mutation.SetType(o)
	return osuo
}

// SetState sets the state field.
func (osuo *OutboundShippingUpdateOne) SetState(o outboundshipping.State) *OutboundShippingUpdateOne {
	osuo.mutation.SetState(o)
	return osuo
}

// SetConsignee sets the consignee field.
func (osuo *OutboundShippingUpdateOne) SetConsignee(s string) *OutboundShippingUpdateOne {
	osuo.mutation.SetConsignee(s)
	return osuo
}

// SetConsigneePhone sets the consignee_phone field.
func (osuo *OutboundShippingUpdateOne) SetConsigneePhone(s string) *OutboundShippingUpdateOne {
	osuo.mutation.SetConsigneePhone(s)
	return osuo
}

// SetAddress sets the address field.
func (osuo *OutboundShippingUpdateOne) SetAddress(s string) *OutboundShippingUpdateOne {
	osuo.mutation.SetAddress(s)
	return osuo
}

// SetPostalCode sets the postal_code field.
func (osuo *OutboundShippingUpdateOne) SetPostalCode(u uint) *OutboundShippingUpdateOne {
	osuo.mutation.ResetPostalCode()
	osuo.mutation.SetPostalCode(u)
	return osuo
}

// AddPostalCode adds u to postal_code.
func (osuo *OutboundShippingUpdateOne) AddPostalCode(u uint) *OutboundShippingUpdateOne {
	osuo.mutation.AddPostalCode(u)
	return osuo
}

// SetCost sets the cost field.
func (osuo *OutboundShippingUpdateOne) SetCost(u uint) *OutboundShippingUpdateOne {
	osuo.mutation.ResetCost()
	osuo.mutation.SetCost(u)
	return osuo
}

// AddCost adds u to cost.
func (osuo *OutboundShippingUpdateOne) AddCost(u uint) *OutboundShippingUpdateOne {
	osuo.mutation.AddCost(u)
	return osuo
}

// SetTransactionID sets the transaction edge to OutboundTransaction by id.
func (osuo *OutboundShippingUpdateOne) SetTransactionID(id int) *OutboundShippingUpdateOne {
	osuo.mutation.SetTransactionID(id)
	return osuo
}

// SetNillableTransactionID sets the transaction edge to OutboundTransaction by id if the given value is not nil.
func (osuo *OutboundShippingUpdateOne) SetNillableTransactionID(id *int) *OutboundShippingUpdateOne {
	if id != nil {
		osuo = osuo.SetTransactionID(*id)
	}
	return osuo
}

// SetTransaction sets the transaction edge to OutboundTransaction.
func (osuo *OutboundShippingUpdateOne) SetTransaction(o *OutboundTransaction) *OutboundShippingUpdateOne {
	return osuo.SetTransactionID(o.ID)
}

// Mutation returns the OutboundShippingMutation object of the builder.
func (osuo *OutboundShippingUpdateOne) Mutation() *OutboundShippingMutation {
	return osuo.mutation
}

// ClearTransaction clears the "transaction" edge to type OutboundTransaction.
func (osuo *OutboundShippingUpdateOne) ClearTransaction() *OutboundShippingUpdateOne {
	osuo.mutation.ClearTransaction()
	return osuo
}

// Save executes the query and returns the updated entity.
func (osuo *OutboundShippingUpdateOne) Save(ctx context.Context) (*OutboundShipping, error) {
	var (
		err  error
		node *OutboundShipping
	)
	if len(osuo.hooks) == 0 {
		if err = osuo.check(); err != nil {
			return nil, err
		}
		node, err = osuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundShippingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osuo.check(); err != nil {
				return nil, err
			}
			osuo.mutation = mutation
			node, err = osuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(osuo.hooks) - 1; i >= 0; i-- {
			mut = osuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OutboundShippingUpdateOne) SaveX(ctx context.Context) *OutboundShipping {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OutboundShippingUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OutboundShippingUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OutboundShippingUpdateOne) check() error {
	if v, ok := osuo.mutation.Courier(); ok {
		if err := outboundshipping.CourierValidator(v); err != nil {
			return &ValidationError{Name: "courier", err: fmt.Errorf("ent: validator failed for field \"courier\": %w", err)}
		}
	}
	if v, ok := osuo.mutation.GetType(); ok {
		if err := outboundshipping.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := osuo.mutation.State(); ok {
		if err := outboundshipping.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	return nil
}

func (osuo *OutboundShippingUpdateOne) sqlSave(ctx context.Context) (_node *OutboundShipping, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outboundshipping.Table,
			Columns: outboundshipping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outboundshipping.FieldID,
			},
		},
	}
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OutboundShipping.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := osuo.mutation.Courier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldCourier,
		})
	}
	if value, ok := osuo.mutation.CourierTrackingCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldCourierTrackingCode,
		})
	}
	if value, ok := osuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldType,
		})
	}
	if value, ok := osuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundshipping.FieldState,
		})
	}
	if value, ok := osuo.mutation.Consignee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldConsignee,
		})
	}
	if value, ok := osuo.mutation.ConsigneePhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldConsigneePhone,
		})
	}
	if value, ok := osuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: outboundshipping.FieldAddress,
		})
	}
	if value, ok := osuo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldPostalCode,
		})
	}
	if value, ok := osuo.mutation.AddedPostalCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldPostalCode,
		})
	}
	if value, ok := osuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldCost,
		})
	}
	if value, ok := osuo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundshipping.FieldCost,
		})
	}
	if osuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   outboundshipping.TransactionTable,
			Columns: []string{outboundshipping.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   outboundshipping.TransactionTable,
			Columns: []string{outboundshipping.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundtransaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OutboundShipping{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outboundshipping.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
