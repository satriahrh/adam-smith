// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/satriahrh/adam-smith/ent/outbounddeal"
	"github.com/satriahrh/adam-smith/ent/outboundshipping"
	"github.com/satriahrh/adam-smith/ent/outboundtransaction"
	"github.com/satriahrh/adam-smith/ent/predicate"
	"github.com/satriahrh/adam-smith/ent/schema"
)

// OutboundTransactionUpdate is the builder for updating OutboundTransaction entities.
type OutboundTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *OutboundTransactionMutation
}

// Where adds a new predicate for the builder.
func (otu *OutboundTransactionUpdate) Where(ps ...predicate.OutboundTransaction) *OutboundTransactionUpdate {
	otu.mutation.predicates = append(otu.mutation.predicates, ps...)
	return otu
}

// SetChannel sets the channel field.
func (otu *OutboundTransactionUpdate) SetChannel(o outboundtransaction.Channel) *OutboundTransactionUpdate {
	otu.mutation.SetChannel(o)
	return otu
}

// SetInvoice sets the invoice field.
func (otu *OutboundTransactionUpdate) SetInvoice(sti schema.OutboundTransactionInvoice) *OutboundTransactionUpdate {
	otu.mutation.SetInvoice(sti)
	return otu
}

// SetBenefit sets the benefit field.
func (otu *OutboundTransactionUpdate) SetBenefit(stb schema.OutboundTransactionBenefit) *OutboundTransactionUpdate {
	otu.mutation.SetBenefit(stb)
	return otu
}

// SetCost sets the cost field.
func (otu *OutboundTransactionUpdate) SetCost(stc schema.OutboundTransactionCost) *OutboundTransactionUpdate {
	otu.mutation.SetCost(stc)
	return otu
}

// SetAmount sets the amount field.
func (otu *OutboundTransactionUpdate) SetAmount(u uint) *OutboundTransactionUpdate {
	otu.mutation.ResetAmount()
	otu.mutation.SetAmount(u)
	return otu
}

// AddAmount adds u to amount.
func (otu *OutboundTransactionUpdate) AddAmount(u uint) *OutboundTransactionUpdate {
	otu.mutation.AddAmount(u)
	return otu
}

// AddDealIDs adds the deals edge to OutboundDeal by ids.
func (otu *OutboundTransactionUpdate) AddDealIDs(ids ...int) *OutboundTransactionUpdate {
	otu.mutation.AddDealIDs(ids...)
	return otu
}

// AddDeals adds the deals edges to OutboundDeal.
func (otu *OutboundTransactionUpdate) AddDeals(o ...*OutboundDeal) *OutboundTransactionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otu.AddDealIDs(ids...)
}

// SetShippingID sets the shipping edge to OutboundShipping by id.
func (otu *OutboundTransactionUpdate) SetShippingID(id int) *OutboundTransactionUpdate {
	otu.mutation.SetShippingID(id)
	return otu
}

// SetNillableShippingID sets the shipping edge to OutboundShipping by id if the given value is not nil.
func (otu *OutboundTransactionUpdate) SetNillableShippingID(id *int) *OutboundTransactionUpdate {
	if id != nil {
		otu = otu.SetShippingID(*id)
	}
	return otu
}

// SetShipping sets the shipping edge to OutboundShipping.
func (otu *OutboundTransactionUpdate) SetShipping(o *OutboundShipping) *OutboundTransactionUpdate {
	return otu.SetShippingID(o.ID)
}

// Mutation returns the OutboundTransactionMutation object of the builder.
func (otu *OutboundTransactionUpdate) Mutation() *OutboundTransactionMutation {
	return otu.mutation
}

// ClearDeals clears all "deals" edges to type OutboundDeal.
func (otu *OutboundTransactionUpdate) ClearDeals() *OutboundTransactionUpdate {
	otu.mutation.ClearDeals()
	return otu
}

// RemoveDealIDs removes the deals edge to OutboundDeal by ids.
func (otu *OutboundTransactionUpdate) RemoveDealIDs(ids ...int) *OutboundTransactionUpdate {
	otu.mutation.RemoveDealIDs(ids...)
	return otu
}

// RemoveDeals removes deals edges to OutboundDeal.
func (otu *OutboundTransactionUpdate) RemoveDeals(o ...*OutboundDeal) *OutboundTransactionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otu.RemoveDealIDs(ids...)
}

// ClearShipping clears the "shipping" edge to type OutboundShipping.
func (otu *OutboundTransactionUpdate) ClearShipping() *OutboundTransactionUpdate {
	otu.mutation.ClearShipping()
	return otu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (otu *OutboundTransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(otu.hooks) == 0 {
		if err = otu.check(); err != nil {
			return 0, err
		}
		affected, err = otu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = otu.check(); err != nil {
				return 0, err
			}
			otu.mutation = mutation
			affected, err = otu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(otu.hooks) - 1; i >= 0; i-- {
			mut = otu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, otu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (otu *OutboundTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := otu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otu *OutboundTransactionUpdate) Exec(ctx context.Context) error {
	_, err := otu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otu *OutboundTransactionUpdate) ExecX(ctx context.Context) {
	if err := otu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otu *OutboundTransactionUpdate) check() error {
	if v, ok := otu.mutation.Channel(); ok {
		if err := outboundtransaction.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf("ent: validator failed for field \"channel\": %w", err)}
		}
	}
	return nil
}

func (otu *OutboundTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outboundtransaction.Table,
			Columns: outboundtransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outboundtransaction.FieldID,
			},
		},
	}
	if ps := otu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otu.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundtransaction.FieldChannel,
		})
	}
	if value, ok := otu.mutation.Invoice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldInvoice,
		})
	}
	if value, ok := otu.mutation.Benefit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldBenefit,
		})
	}
	if value, ok := otu.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldCost,
		})
	}
	if value, ok := otu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundtransaction.FieldAmount,
		})
	}
	if value, ok := otu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundtransaction.FieldAmount,
		})
	}
	if otu.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outboundtransaction.DealsTable,
			Columns: []string{outboundtransaction.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outbounddeal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.RemovedDealsIDs(); len(nodes) > 0 && !otu.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outboundtransaction.DealsTable,
			Columns: []string{outboundtransaction.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.DealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outboundtransaction.DealsTable,
			Columns: []string{outboundtransaction.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if otu.mutation.ShippingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   outboundtransaction.ShippingTable,
			Columns: []string{outboundtransaction.ShippingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundshipping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.ShippingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   outboundtransaction.ShippingTable,
			Columns: []string{outboundtransaction.ShippingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundshipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, otu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outboundtransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OutboundTransactionUpdateOne is the builder for updating a single OutboundTransaction entity.
type OutboundTransactionUpdateOne struct {
	config
	hooks    []Hook
	mutation *OutboundTransactionMutation
}

// SetChannel sets the channel field.
func (otuo *OutboundTransactionUpdateOne) SetChannel(o outboundtransaction.Channel) *OutboundTransactionUpdateOne {
	otuo.mutation.SetChannel(o)
	return otuo
}

// SetInvoice sets the invoice field.
func (otuo *OutboundTransactionUpdateOne) SetInvoice(sti schema.OutboundTransactionInvoice) *OutboundTransactionUpdateOne {
	otuo.mutation.SetInvoice(sti)
	return otuo
}

// SetBenefit sets the benefit field.
func (otuo *OutboundTransactionUpdateOne) SetBenefit(stb schema.OutboundTransactionBenefit) *OutboundTransactionUpdateOne {
	otuo.mutation.SetBenefit(stb)
	return otuo
}

// SetCost sets the cost field.
func (otuo *OutboundTransactionUpdateOne) SetCost(stc schema.OutboundTransactionCost) *OutboundTransactionUpdateOne {
	otuo.mutation.SetCost(stc)
	return otuo
}

// SetAmount sets the amount field.
func (otuo *OutboundTransactionUpdateOne) SetAmount(u uint) *OutboundTransactionUpdateOne {
	otuo.mutation.ResetAmount()
	otuo.mutation.SetAmount(u)
	return otuo
}

// AddAmount adds u to amount.
func (otuo *OutboundTransactionUpdateOne) AddAmount(u uint) *OutboundTransactionUpdateOne {
	otuo.mutation.AddAmount(u)
	return otuo
}

// AddDealIDs adds the deals edge to OutboundDeal by ids.
func (otuo *OutboundTransactionUpdateOne) AddDealIDs(ids ...int) *OutboundTransactionUpdateOne {
	otuo.mutation.AddDealIDs(ids...)
	return otuo
}

// AddDeals adds the deals edges to OutboundDeal.
func (otuo *OutboundTransactionUpdateOne) AddDeals(o ...*OutboundDeal) *OutboundTransactionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otuo.AddDealIDs(ids...)
}

// SetShippingID sets the shipping edge to OutboundShipping by id.
func (otuo *OutboundTransactionUpdateOne) SetShippingID(id int) *OutboundTransactionUpdateOne {
	otuo.mutation.SetShippingID(id)
	return otuo
}

// SetNillableShippingID sets the shipping edge to OutboundShipping by id if the given value is not nil.
func (otuo *OutboundTransactionUpdateOne) SetNillableShippingID(id *int) *OutboundTransactionUpdateOne {
	if id != nil {
		otuo = otuo.SetShippingID(*id)
	}
	return otuo
}

// SetShipping sets the shipping edge to OutboundShipping.
func (otuo *OutboundTransactionUpdateOne) SetShipping(o *OutboundShipping) *OutboundTransactionUpdateOne {
	return otuo.SetShippingID(o.ID)
}

// Mutation returns the OutboundTransactionMutation object of the builder.
func (otuo *OutboundTransactionUpdateOne) Mutation() *OutboundTransactionMutation {
	return otuo.mutation
}

// ClearDeals clears all "deals" edges to type OutboundDeal.
func (otuo *OutboundTransactionUpdateOne) ClearDeals() *OutboundTransactionUpdateOne {
	otuo.mutation.ClearDeals()
	return otuo
}

// RemoveDealIDs removes the deals edge to OutboundDeal by ids.
func (otuo *OutboundTransactionUpdateOne) RemoveDealIDs(ids ...int) *OutboundTransactionUpdateOne {
	otuo.mutation.RemoveDealIDs(ids...)
	return otuo
}

// RemoveDeals removes deals edges to OutboundDeal.
func (otuo *OutboundTransactionUpdateOne) RemoveDeals(o ...*OutboundDeal) *OutboundTransactionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otuo.RemoveDealIDs(ids...)
}

// ClearShipping clears the "shipping" edge to type OutboundShipping.
func (otuo *OutboundTransactionUpdateOne) ClearShipping() *OutboundTransactionUpdateOne {
	otuo.mutation.ClearShipping()
	return otuo
}

// Save executes the query and returns the updated entity.
func (otuo *OutboundTransactionUpdateOne) Save(ctx context.Context) (*OutboundTransaction, error) {
	var (
		err  error
		node *OutboundTransaction
	)
	if len(otuo.hooks) == 0 {
		if err = otuo.check(); err != nil {
			return nil, err
		}
		node, err = otuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OutboundTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = otuo.check(); err != nil {
				return nil, err
			}
			otuo.mutation = mutation
			node, err = otuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(otuo.hooks) - 1; i >= 0; i-- {
			mut = otuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, otuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (otuo *OutboundTransactionUpdateOne) SaveX(ctx context.Context) *OutboundTransaction {
	node, err := otuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (otuo *OutboundTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := otuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otuo *OutboundTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := otuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otuo *OutboundTransactionUpdateOne) check() error {
	if v, ok := otuo.mutation.Channel(); ok {
		if err := outboundtransaction.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf("ent: validator failed for field \"channel\": %w", err)}
		}
	}
	return nil
}

func (otuo *OutboundTransactionUpdateOne) sqlSave(ctx context.Context) (_node *OutboundTransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outboundtransaction.Table,
			Columns: outboundtransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outboundtransaction.FieldID,
			},
		},
	}
	id, ok := otuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OutboundTransaction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := otuo.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: outboundtransaction.FieldChannel,
		})
	}
	if value, ok := otuo.mutation.Invoice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldInvoice,
		})
	}
	if value, ok := otuo.mutation.Benefit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldBenefit,
		})
	}
	if value, ok := otuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: outboundtransaction.FieldCost,
		})
	}
	if value, ok := otuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundtransaction.FieldAmount,
		})
	}
	if value, ok := otuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: outboundtransaction.FieldAmount,
		})
	}
	if otuo.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outboundtransaction.DealsTable,
			Columns: []string{outboundtransaction.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outbounddeal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.RemovedDealsIDs(); len(nodes) > 0 && !otuo.mutation.DealsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outboundtransaction.DealsTable,
			Columns: []string{outboundtransaction.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.DealsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outboundtransaction.DealsTable,
			Columns: []string{outboundtransaction.DealsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outbounddeal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if otuo.mutation.ShippingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   outboundtransaction.ShippingTable,
			Columns: []string{outboundtransaction.ShippingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundshipping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.ShippingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   outboundtransaction.ShippingTable,
			Columns: []string{outboundtransaction.ShippingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outboundshipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OutboundTransaction{config: otuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, otuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outboundtransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
