// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/satriahrh/adam-smith/ent/product"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Descriptions holds the value of the "descriptions" field.
	Descriptions []struct {
		Heading string "json:\"heading\""
		Body    string "json:\"body\""
	} `json:"descriptions,omitempty"`
	// Images holds the value of the "images" field.
	Images struct {
		Thumbnail string   "json:\"thumbnail\""
		Displays  []string "json:\"displays\""
		Variants  []string "json:\"variants\""
	} `json:"images,omitempty"`
	// Marketplaces holds the value of the "marketplaces" field.
	Marketplaces struct {
		Tokopedia string "json:\"tokopedia\""
		Shopee    string "json:\"shopee\""
		Bukalapak string "json:\"bukalapak\""
	} `json:"marketplaces,omitempty"`
	// Prices holds the value of the "prices" field.
	Prices []uint `json:"prices,omitempty"`
	// Stocks holds the value of the "stocks" field.
	Stocks []uint `json:"stocks,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&[]byte{},         // descriptions
		&[]byte{},         // images
		&[]byte{},         // marketplaces
		&[]byte{},         // prices
		&[]byte{},         // stocks
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(values ...interface{}) error {
	if m, n := len(values), len(product.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		pr.Name = value.String
	}

	if value, ok := values[1].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field descriptions", values[1])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &pr.Descriptions); err != nil {
			return fmt.Errorf("unmarshal field descriptions: %v", err)
		}
	}

	if value, ok := values[2].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field images", values[2])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &pr.Images); err != nil {
			return fmt.Errorf("unmarshal field images: %v", err)
		}
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field marketplaces", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &pr.Marketplaces); err != nil {
			return fmt.Errorf("unmarshal field marketplaces: %v", err)
		}
	}

	if value, ok := values[4].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field prices", values[4])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &pr.Prices); err != nil {
			return fmt.Errorf("unmarshal field prices: %v", err)
		}
	}

	if value, ok := values[5].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field stocks", values[5])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &pr.Stocks); err != nil {
			return fmt.Errorf("unmarshal field stocks: %v", err)
		}
	}
	return nil
}

// Update returns a builder for updating this Product.
// Note that, you need to call Product.Unwrap() before calling this method, if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", descriptions=")
	builder.WriteString(fmt.Sprintf("%v", pr.Descriptions))
	builder.WriteString(", images=")
	builder.WriteString(fmt.Sprintf("%v", pr.Images))
	builder.WriteString(", marketplaces=")
	builder.WriteString(fmt.Sprintf("%v", pr.Marketplaces))
	builder.WriteString(", prices=")
	builder.WriteString(fmt.Sprintf("%v", pr.Prices))
	builder.WriteString(", stocks=")
	builder.WriteString(fmt.Sprintf("%v", pr.Stocks))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
